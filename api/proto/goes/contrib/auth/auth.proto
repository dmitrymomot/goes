syntax = "proto3";
package goes.contrib.auth;
option go_package = "github.com/modernice/goes/api/proto/gen/contrib/auth;authpb";

import "goes/common/uuid.proto";
import "goes/aggregate/ref.proto";
import "google/protobuf/empty.proto";

// AuthService is the authorization service.
service AuthService {
	// GetPermissions returns the permissions read-model of the given actor.
	rpc GetPermissions(common.UUID) returns (Permissions);

	// Allows returns whether an actor is allowed to perform an action.
	rpc Allows(AllowsReq) returns (AllowsResp);

	// LookupActor returns the aggregate id of the actor with the given
	// string-formatted actor id.
	rpc LookupActor(LookupActorReq) returns (goes.common.UUID);

	// LookupRole returns the aggregate id of the role with the given name.
	rpc LookupRole(LookupRoleReq) returns (goes.common.UUID);

	// GrantToActor grants the given actor permission to perform the given actions.
	rpc GrantToActor(GrantRevokeReq) returns (google.protobuf.Empty);

	// GrantToRole grants the given role permission to perform the given actions.
	rpc GrantToRole(GrantRevokeReq) returns (google.protobuf.Empty);

	// RevokeFromActor revokes from the given actor the permission to perform the given actions.
	rpc RevokeFromActor(GrantRevokeReq) returns (google.protobuf.Empty);

	// RevokeFromRole revokes from the given role the permission to perform the given actions.
	rpc RevokeFromRole(GrantRevokeReq) returns (google.protobuf.Empty);
}

// Permissions is the read-model for an actor's permissions.
message Permissions {
	goes.common.UUID actor_id = 1;
	repeated goes.common.UUID roles = 2;
	Actions of_actor = 3;
	Actions of_roles = 4;
}

// Actions maps aggregate names to permitted actions on these aggregates.
message Actions {
	map<string, ActionGrants> actions = 1;
}

// ActionGrants holds granted actions as the amount of times they were granted
// to the actor or role.
message ActionGrants {
	map<string, uint64> actions = 1;
}

// AllowsReq is the request for Allows.
message AllowsReq {
	goes.common.UUID actor_id = 1;
	goes.aggregate.Ref aggregate = 2;
	string action = 3;
}

// AllowsResp is the response for Allows.
message AllowsResp {
	bool allowed = 1;
}

// LookupActorReq is the request for LookupActor.
message LookupActorReq {
	string string_id = 1;
}

// LookupRoleReq is the request for LookupRole.
message LookupRoleReq {
	string name = 1;
}

// GrantRevokeReq is the request for GrantToXXX and RevokeFromXXX.
message GrantRevokeReq {
	goes.common.UUID role_or_actor = 1;
	goes.aggregate.Ref target = 2;
	repeated string actions = 3;
}
