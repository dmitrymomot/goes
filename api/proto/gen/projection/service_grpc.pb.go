// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package projectionpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProjectionServiceClient is the client API for ProjectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectionServiceClient interface {
	Trigger(ctx context.Context, in *TriggerReq, opts ...grpc.CallOption) (*TriggerResp, error)
}

type projectionServiceClient struct {
	cc grpc.ClientConnInterface
}

// NewProjectionServiceClient creates a client stub for the
// ProjectionServiceClient. The client connects to the server specified by the
// grpc.ClientConnInterface parameter and can be used to call the Trigger RPC
// method on the ProjectionServiceServer.
func NewProjectionServiceClient(cc grpc.ClientConnInterface) ProjectionServiceClient {
	return &projectionServiceClient{cc}
}

// Trigger sends a TriggerReq to the ProjectionService server and returns a
// TriggerResp, along with an error if any.
func (c *projectionServiceClient) Trigger(ctx context.Context, in *TriggerReq, opts ...grpc.CallOption) (*TriggerResp, error) {
	out := new(TriggerResp)
	err := c.cc.Invoke(ctx, "/goes.projection.ProjectionService/Trigger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectionServiceServer is the server API for ProjectionService service.
// All implementations must embed UnimplementedProjectionServiceServer
// for forward compatibility
type ProjectionServiceServer interface {
	Trigger(context.Context, *TriggerReq) (*TriggerResp, error)
	mustEmbedUnimplementedProjectionServiceServer()
}

// UnimplementedProjectionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProjectionServiceServer struct {
}

// Trigger is a method of the UnimplementedProjectionServiceServer type, which
// implements the ProjectionServiceServer interface. It returns a nil response
// and an error with the code codes.Unimplemented and the message "method
// Trigger not implemented".
func (UnimplementedProjectionServiceServer) Trigger(context.Context, *TriggerReq) (*TriggerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Trigger not implemented")
}
func (UnimplementedProjectionServiceServer) mustEmbedUnimplementedProjectionServiceServer() {}

// UnsafeProjectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectionServiceServer will
// result in compilation errors.
type UnsafeProjectionServiceServer interface {
	mustEmbedUnimplementedProjectionServiceServer()
}

// RegisterProjectionServiceServer registers a ProjectionServiceServer
// implementation with the given grpc.ServiceRegistrar.
func RegisterProjectionServiceServer(s grpc.ServiceRegistrar, srv ProjectionServiceServer) {
	s.RegisterService(&ProjectionService_ServiceDesc, srv)
}

// _ProjectionService_Trigger_Handler is a function that handles unary RPC calls
// to the "Trigger" method of the ProjectionServiceServer. It decodes the
// incoming request into a TriggerReq object, and then calls the Trigger method
// of the ProjectionServiceServer with the request context and TriggerReq object
// as arguments. If an interceptor is provided, it will use it to handle the
// call.
func _ProjectionService_Trigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectionServiceServer).Trigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goes.projection.ProjectionService/Trigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectionServiceServer).Trigger(ctx, req.(*TriggerReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectionService_ServiceDesc is the grpc.ServiceDesc for ProjectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goes.projection.ProjectionService",
	HandlerType: (*ProjectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Trigger",
			Handler:    _ProjectionService_Trigger_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goes/projection/service.proto",
}
