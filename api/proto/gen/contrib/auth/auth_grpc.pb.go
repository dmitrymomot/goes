// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package authpb

import (
	context "context"
	common "github.com/modernice/goes/api/proto/gen/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	// GetPermissions returns the permissions read-model of the given actor.
	GetPermissions(ctx context.Context, in *common.UUID, opts ...grpc.CallOption) (*Permissions, error)
	// Allows returns whether an actor is allowed to perform an action.
	Allows(ctx context.Context, in *AllowsReq, opts ...grpc.CallOption) (*AllowsResp, error)
	// LookupActor returns the aggregate id of the actor with the given
	// string-formatted actor id.
	LookupActor(ctx context.Context, in *LookupActorReq, opts ...grpc.CallOption) (*common.UUID, error)
	// LookupRole returns the aggregate id of the role with the given name.
	LookupRole(ctx context.Context, in *LookupRoleReq, opts ...grpc.CallOption) (*common.UUID, error)
	// GrantToActor grants the given actor permission to perform the given actions.
	GrantToActor(ctx context.Context, in *GrantRevokeReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GrantToRole grants the given role permission to perform the given actions.
	GrantToRole(ctx context.Context, in *GrantRevokeReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// RevokeFromActor revokes from the given actor the permission to perform the given actions.
	RevokeFromActor(ctx context.Context, in *GrantRevokeReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// RevokeFromRole revokes from the given role the permission to perform the given actions.
	RevokeFromRole(ctx context.Context, in *GrantRevokeReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) GetPermissions(ctx context.Context, in *common.UUID, opts ...grpc.CallOption) (*Permissions, error) {
	out := new(Permissions)
	err := c.cc.Invoke(ctx, "/goes.contrib.auth.AuthService/GetPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) Allows(ctx context.Context, in *AllowsReq, opts ...grpc.CallOption) (*AllowsResp, error) {
	out := new(AllowsResp)
	err := c.cc.Invoke(ctx, "/goes.contrib.auth.AuthService/Allows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) LookupActor(ctx context.Context, in *LookupActorReq, opts ...grpc.CallOption) (*common.UUID, error) {
	out := new(common.UUID)
	err := c.cc.Invoke(ctx, "/goes.contrib.auth.AuthService/LookupActor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) LookupRole(ctx context.Context, in *LookupRoleReq, opts ...grpc.CallOption) (*common.UUID, error) {
	out := new(common.UUID)
	err := c.cc.Invoke(ctx, "/goes.contrib.auth.AuthService/LookupRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GrantToActor(ctx context.Context, in *GrantRevokeReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/goes.contrib.auth.AuthService/GrantToActor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GrantToRole(ctx context.Context, in *GrantRevokeReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/goes.contrib.auth.AuthService/GrantToRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) RevokeFromActor(ctx context.Context, in *GrantRevokeReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/goes.contrib.auth.AuthService/RevokeFromActor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) RevokeFromRole(ctx context.Context, in *GrantRevokeReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/goes.contrib.auth.AuthService/RevokeFromRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility
type AuthServiceServer interface {
	// GetPermissions returns the permissions read-model of the given actor.
	GetPermissions(context.Context, *common.UUID) (*Permissions, error)
	// Allows returns whether an actor is allowed to perform an action.
	Allows(context.Context, *AllowsReq) (*AllowsResp, error)
	// LookupActor returns the aggregate id of the actor with the given
	// string-formatted actor id.
	LookupActor(context.Context, *LookupActorReq) (*common.UUID, error)
	// LookupRole returns the aggregate id of the role with the given name.
	LookupRole(context.Context, *LookupRoleReq) (*common.UUID, error)
	// GrantToActor grants the given actor permission to perform the given actions.
	GrantToActor(context.Context, *GrantRevokeReq) (*emptypb.Empty, error)
	// GrantToRole grants the given role permission to perform the given actions.
	GrantToRole(context.Context, *GrantRevokeReq) (*emptypb.Empty, error)
	// RevokeFromActor revokes from the given actor the permission to perform the given actions.
	RevokeFromActor(context.Context, *GrantRevokeReq) (*emptypb.Empty, error)
	// RevokeFromRole revokes from the given role the permission to perform the given actions.
	RevokeFromRole(context.Context, *GrantRevokeReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServiceServer struct {
}

func (UnimplementedAuthServiceServer) GetPermissions(context.Context, *common.UUID) (*Permissions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissions not implemented")
}
func (UnimplementedAuthServiceServer) Allows(context.Context, *AllowsReq) (*AllowsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Allows not implemented")
}
func (UnimplementedAuthServiceServer) LookupActor(context.Context, *LookupActorReq) (*common.UUID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupActor not implemented")
}
func (UnimplementedAuthServiceServer) LookupRole(context.Context, *LookupRoleReq) (*common.UUID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupRole not implemented")
}
func (UnimplementedAuthServiceServer) GrantToActor(context.Context, *GrantRevokeReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantToActor not implemented")
}
func (UnimplementedAuthServiceServer) GrantToRole(context.Context, *GrantRevokeReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantToRole not implemented")
}
func (UnimplementedAuthServiceServer) RevokeFromActor(context.Context, *GrantRevokeReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeFromActor not implemented")
}
func (UnimplementedAuthServiceServer) RevokeFromRole(context.Context, *GrantRevokeReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeFromRole not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_GetPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goes.contrib.auth.AuthService/GetPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetPermissions(ctx, req.(*common.UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_Allows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllowsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Allows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goes.contrib.auth.AuthService/Allows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Allows(ctx, req.(*AllowsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_LookupActor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupActorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).LookupActor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goes.contrib.auth.AuthService/LookupActor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).LookupActor(ctx, req.(*LookupActorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_LookupRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).LookupRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goes.contrib.auth.AuthService/LookupRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).LookupRole(ctx, req.(*LookupRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GrantToActor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantRevokeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GrantToActor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goes.contrib.auth.AuthService/GrantToActor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GrantToActor(ctx, req.(*GrantRevokeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GrantToRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantRevokeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GrantToRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goes.contrib.auth.AuthService/GrantToRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GrantToRole(ctx, req.(*GrantRevokeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_RevokeFromActor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantRevokeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).RevokeFromActor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goes.contrib.auth.AuthService/RevokeFromActor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).RevokeFromActor(ctx, req.(*GrantRevokeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_RevokeFromRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantRevokeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).RevokeFromRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goes.contrib.auth.AuthService/RevokeFromRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).RevokeFromRole(ctx, req.(*GrantRevokeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goes.contrib.auth.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPermissions",
			Handler:    _AuthService_GetPermissions_Handler,
		},
		{
			MethodName: "Allows",
			Handler:    _AuthService_Allows_Handler,
		},
		{
			MethodName: "LookupActor",
			Handler:    _AuthService_LookupActor_Handler,
		},
		{
			MethodName: "LookupRole",
			Handler:    _AuthService_LookupRole_Handler,
		},
		{
			MethodName: "GrantToActor",
			Handler:    _AuthService_GrantToActor_Handler,
		},
		{
			MethodName: "GrantToRole",
			Handler:    _AuthService_GrantToRole_Handler,
		},
		{
			MethodName: "RevokeFromActor",
			Handler:    _AuthService_RevokeFromActor_Handler,
		},
		{
			MethodName: "RevokeFromRole",
			Handler:    _AuthService_RevokeFromRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goes/contrib/auth/auth.proto",
}
