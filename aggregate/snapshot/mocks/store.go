// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package mock_snapshot is a generated GoMock package.
package mock_snapshot

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	aggregate "github.com/modernice/goes/aggregate"
	snapshot "github.com/modernice/goes/aggregate/snapshot"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Save mocks base method
func (m *MockStore) Save(arg0 context.Context, arg1 snapshot.Snapshot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockStoreMockRecorder) Save(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockStore)(nil).Save), arg0, arg1)
}

// Latest mocks base method
func (m *MockStore) Latest(arg0 context.Context, arg1 string, arg2 uuid.UUID) (snapshot.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Latest", arg0, arg1, arg2)
	ret0, _ := ret[0].(snapshot.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Latest indicates an expected call of Latest
func (mr *MockStoreMockRecorder) Latest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Latest", reflect.TypeOf((*MockStore)(nil).Latest), arg0, arg1, arg2)
}

// Version mocks base method
func (m *MockStore) Version(arg0 context.Context, arg1 string, arg2 uuid.UUID, arg3 int) (snapshot.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(snapshot.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Version indicates an expected call of Version
func (mr *MockStoreMockRecorder) Version(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockStore)(nil).Version), arg0, arg1, arg2, arg3)
}

// Limit mocks base method
func (m *MockStore) Limit(arg0 context.Context, arg1 string, arg2 uuid.UUID, arg3 int) (snapshot.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Limit", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(snapshot.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Limit indicates an expected call of Limit
func (mr *MockStoreMockRecorder) Limit(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Limit", reflect.TypeOf((*MockStore)(nil).Limit), arg0, arg1, arg2, arg3)
}

// Query mocks base method
func (m *MockStore) Query(arg0 context.Context, arg1 aggregate.Query) (<-chan snapshot.Snapshot, <-chan error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", arg0, arg1)
	ret0, _ := ret[0].(<-chan snapshot.Snapshot)
	ret1, _ := ret[1].(<-chan error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Query indicates an expected call of Query
func (mr *MockStoreMockRecorder) Query(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockStore)(nil).Query), arg0, arg1)
}

// Delete mocks base method
func (m *MockStore) Delete(arg0 context.Context, arg1 snapshot.Snapshot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockStoreMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStore)(nil).Delete), arg0, arg1)
}
